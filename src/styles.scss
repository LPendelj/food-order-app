/* You can add global styles to this file, and also import other style files */
@import url('https://fonts.googleapis.com/css2?family=Quicksand&family=Roboto:wght@400;700&display=swap');


// In addition to flex-wrap, there are several other important CSS properties that can be used to control the behavior of flex containers and flex items. Here are some key properties:
// display: flex;: This property is applied to the container and establishes a flex container, enabling the use of flex properties on its children.
// flex-direction: row | row-reverse | column | column-reverse;: Determines the main axis direction of the flex container. By default, it is set to row, which means the main axis runs horizontally. The other options change the main axis direction accordingly.
// justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;: Specifies how flex items are aligned along the main axis. It determines the distribution of space between and around the flex items.
// align-items: flex-start | flex-end | center | baseline | stretch;: Defines how flex items are aligned on the cross axis (perpendicular to the main axis).
// align-content: flex-start | flex-end | center | space-between | space-around | stretch;: Controls the alignment of flex lines when there is extra space available on the cross axis. It specifies the distribution of space between and around flex lines.
// flex-grow: Determines how flex items grow relative to each other along the main axis when there is extra space available.
// flex-shrink: Specifies how flex items shrink relative to each other along the main axis when there is not enough space.
// flex-basis: Sets the initial size of flex items along the main axis before they are distributed.

@import 'node_modules/ngx-toastr/toastr.css';

*{
  box-sizing: border-box;
}

html{
  font-size: 16px;
}

body{
  margin: 0;
  font-family: "Quicksand", sans-serif;
  font-size: 18px;
}

a{
  text-decoration: none;
}
